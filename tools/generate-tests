#!/usr/bin/env python2

import sys
import srfi_60
import scheme_codegen

width_limit = int(sys.argv[1])
per_op_tests = int(sys.argv[2])

srfi_60_procedures = srfi_60.make_procedures_for(width_limit)

test_groups = {
    'Bitwise Operations': ['bitwise_and', 'bitwise_ior', 'bitwise_xor',
        'bitwise_not', 'bitwise_if', 'any_bits_setp'],

    'Integer Properties': ['bit_count', 'integer_length', 'first_set_bit'],

    'Bit Within Word': ['bit_setp', 'copy_bit'],

    'Field of Bits': ['bit_field', 'copy_bit_field', 'arithmetic_shift',
        'rotate_bit_field', 'reverse_bit_field'],

    'Bits as Booleans': ['integer_to_list', 'list_to_integer']
}

#
# Generating tests
#

def group_start(name):
    return '(test-begin "{}")'.format(name)

def group_end():
    return '(test-end)'

def generate_tests(op):
    result = ""
    name = scheme_codegen.procedure_name(op.__name__)
    for _ in xrange(per_op_tests):
        args = [gen() for gen in op.domain]
        val = scheme_codegen.value(op(*args))
        args = " ".join(map(scheme_codegen.value, args))
        result += "(test {} ({} {}))\n".format(val, name, args)
    return result

#
# Printing out
#

print "(import (chibi) (chibi test) (srfi 60))"
print
print group_start("srfi-60/generated")
print

for group_name, procedure_names in test_groups.iteritems():
    print group_start(group_name)
    print
    for procedure_name in procedure_names:
        print generate_tests(srfi_60_procedures[procedure_name])
    print group_end()
    print

print group_end()
print
print "(test-exit)"
